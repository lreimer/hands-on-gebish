plugins {
    id 'groovy'
    id "com.github.erdi.webdriver-binaries" version "2.7"
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless", "chromeRemote", "firefoxRemote"]

    ext {
        gebVersion = '4.1'
        seleniumVersion = '4.1.4'
        // chromeDriverVersion = '91.0.4472.19'
        // chromeDriverVersion = '90.0.4430.24'
        chromeDriverVersion = '101.0.4951.41'
        geckoDriverVersion = '0.31.0'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // if using Spock, need to depend on geb-spock
    testImplementation "org.gebish:geb-spock:$gebVersion"
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude group: "org.codehaus.groovy"
    }

    // drivers
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

webdriverBinaries {
    driverUrlsConfiguration = resources.text.fromFile('package.json')
    chromedriver {
        version = chromeDriverVersion
        fallbackTo32Bit = true
    }
    geckodriver geckoDriverVersion
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver

        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}
